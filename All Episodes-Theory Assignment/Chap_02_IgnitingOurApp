### What is 'NPM'?
* NPM is Node package Manager that manages all the packages that are required to build a production ready app by minifing, optimizing the code and images, removing console.log(), bundling etc.
 ---

### What is Parcel/Webpack? Why do we need it?

- parcel/ Webpack are the bundlers that helps to minify, clean, and makes the code compact for sending request and receiving response easily. 
---

### What is .parcel-cache?

- parcel.cache folder stores information about the project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyse everything from scratch.

This is the reason parcel can be fast in development mode.

Parcel.cache should be added in .gitignore because it can be re-generated on the server, and this cache should not be committed in the repository 

---

### What is npx?

npx means **N**ode-module-**P**ackage e**X**ecute the .
It allows developers to execute any JS package available on NPM registry without even installing it.

---

### What is the difference between 'dependencies' vs 'dev-dependencies'?

- 'dependencies' refers to production ready apps
  => indicated by -D in commands like, 'npm install -D parcel'

- 'dev-dependencies' refers to development apps
  => indicated when there is absence of -D in commands like, 'npm install react'

---

### What is tree shaking?

- removing un-used or dead code from project/ app using bundlers like parcel to **optimise the code** and **improve web performance**

- This basically means that, at compile time, the compiler can determine imports and exports and programmatically decide which code should be executed.
- The reason is because most of the packages we install really donâ€™t need all of their dependencies and this results in importing large bundles where we end up needing just a small part of the bundle.

---

### What is Hot Module Replacement?

- HMR shows the reflection of changes( such as exchanges, adds, or removes modules) on browser automatically without full reload, while the application is running,
- without needing to change the whole web page that improves the development experience, hence saving the development time
- the application state is retained using HMR (which is lost during a full reload).
---

### List down your favourite 5superpowers of Parcel and describe ay 3 of them in your own words.

some of the Superpowers/ Responsibilities of Parcel 'the BUNDLER' are: 

  - creating the server,
  - minify the file,
  - removes console.log(),
  - optimises the images,
  - reflects the changes on server by 'Hot Module Replacement'
  - has 'file watcher algo'
  - consistent hashing algo
  - supports HTTPS 
  - API proxy
  - backward-compatibility

* Parcel supports HTTPS for using a hostname for authentication cookies, or for debugging mixed content issues.
    * To use an automatically generated self-signed certificate, use the --https CLI flag. The first time you load the page, you may need to manually trust this certificate in your browser.

* File watchers: written in C++
* 


---

### What is .gitignore ? What should we add and not add into it?

  * A gitignore file specifies intentionally untracked files that Git should ignore.
  * node/ Patterns/ files/ packages that can be re-generated on ther server will be added in .gitignore .
  * example: parcel-cache 
  
---

### difference between 'package.json' and 'package-lock.json'
* package.json file contains the metadata about the project along with the functional dependencies that is required by the application.
    * package.json will automatically **updates** the version of packages present in the project

* package-lock.json **locks the version** of packages to ensure that the version present in local system for development is same as that of versions present for production .

---
### Why shouldn't the pacakge-lock.json file be modified?

* package-lock.json file is a 'generated file' and is not designed to be modified manually.
* this file tracks the entire tree of dependencies.
* also locks the version of each dependencies
* package-lock.json should be committed to the code repository.

---

### What is '**node_modules**'? Is it good idea to push that on git?
  * when npm is installed, node-module folder is created. 
* the node-modules can be re-generated by using package.json and package-lock.json. therefore, it should not be pushed to git.

* node-modules contains all the helper packages that are required for creating an App. These pacakges help in minifying, clean the code, clear the console.logs, optimisations and a lot more. 

---

### What is **dist** folder?
* dist folder is created upon production build, that has the minified version of the files (html, css, js) written by developer .
* dist folder keeps the track of modified, minified files
* 

---
### What is **browserLists**
* browserList specifies the number and type of browser the App is going to be compatible with

